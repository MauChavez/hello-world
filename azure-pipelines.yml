# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

# -----------------    variables ------------------
# variables global que existiran dentro de todo el pipeline
variables:
  resourceGroup: 'microservices'
  containerName: 'hello-world-6'
  imageName: 'devs4j/hello-world-06'
  dnsName: 'hello-world-06-123456'
# -----------------    variables ------------------


pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'



# -----------------    pasos con maven ------------------
# pasos que ejecutara maven poco a poco
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

# -----------------    pasos con maven ------------------


# -----------------    obtendra la version del proyecto ------------------
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      [xml]$pomXml = Get-Content .\pom.xml
      $version=$pomXml.project.version
      Write-Host "##vso[task.setvariable variable=version]$version"
# -----------------    obtendra la version del proyecto ------------------


# -----------  paso para realizar login con docker hub
- task: Docker@2
  displayName: Login to Docker Hub
  inputs:
    command: login
    containerRegistry: docker-hub
# -----------  paso para realizar login con docker hub



# -----------  paso para compilar y hacer commit
# toma variables globales y locales para conocer la version
- task: Docker@2
  displayName: Build and Push
  inputs:
    command: buildAndPush
    repository: $(imageName)
    tags: |
      $(version)
# -----------  paso para compilar y hacer commit


# -------- paso  publicar en azure
# para borrar, crear y mostrar el resultado del contenedor dentro de azure
- task: AzureCLI@1
  inputs:
    connectedServiceNameARM: 'AzureCloud-test'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az container delete --resource-group $(resourceGroup) --name $(containerName) --yes
      az container create --resource-group $(resourceGroup) --name $(containerName) --image $(imageName):$(version) --dns-name-label $(dnsName) --ports 8080
      az container show --resource-group $(resourceGroup) --name $(containerName) --query "{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}" --out table

# -------- paso para publicar en azure
